<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>AE1PGA Coursework 4 - Dungeon escape</title>
    <meta name="description" content="AE1PGA Coursework 4">
    <meta name="author" content="Matthew Pike and Paul Dempster">
    <style>
      h2, h3 {
      text-decoration: underline;
      }
    </style>
  </head>
  
  <body>
    <h1>AE1PGA Coursework 4 - Dungeon escape</h1>


    <h2>Introduction</h2>

    <p>This is the fourth AE1PGA Coursework.  It is worth <b>30% of the module mark</b>.  It requires you to write a program which will load a representation of a dungeon from a file and calculate the shortest route to take out of the dungeon.
      The deadline for this exercise is <b>16:00 on Wednesday 7th of December 2016</b>.
    </p>

    <p><strong>Read the entire document before beginning the exercise.</strong></p>

    <p>If you have any questions about this exercise, please ask in the Q&amp;A forum on Moodle, after a lecture, in a lab, or during the advertised office hours.
      Do not post your program or parts of your program to Moodle as you are not allowed to share your coursework programs with other students.
      
  If any questions requires this exercise to be clarified then this 
document will be updated and everyone will be notified via Moodle.
    </p>

    <h3>Version History</h3>
    <ul>
      <li>Version 1.0 - 2016-11-17 - Original version.</li>
    </ul>

    
<h2>Submission</h2>

    <p>You must submit a single C source code file containing all your code for this exercise.  This file must be called <code>dungeon.c</code>
 and must not require any other files outside of the standard C headers 
which are always available.  The first line of the file should be a 
comment which contains your student ID number, username, and full name, 
of the form:<br>
      <code style="padding-left:5em;">// 6512345 zy12345 Joe Blogs</code>
    </p>
    <p>The file must compile without warnings or errors when I use the command<br>
      <code style="padding-left:5em;">gcc -std=c99 -lm -Wall -Wformat -Wwrite-strings dungeon.c -o dungeon</code>
    </p>
    <p>
      This command will be run on our Linux server <code>cs-linux</code>.
  If it does not compile, for any reason, then you will lose all the 
marks for testing (common reasons in the past have been submitting a 
file with the wrong filename, or developing your solution on your 
personal computer without having tested it on our Linux server).  If the
 file compiles but has warnings then you will lose some marks for not 
correcting the warnings.
    </p>

    <p>The completed source code file should be uploaded to the Coursework 4 Submission link on the AE1PGA Moodle page.  You may submit 
as many times as you wish before the deadline (the last submission 
before the deadline will be used).  After the deadline has passed, if 
you have already submitted your exercise then you will not be able to 
submit again.  If you have not already submitted then you will be 
allowed to submit <b>once</b>.
    </p>

    <p>Remember that you can only access the Linux server from the 
designated labs in SEB and SSB and that these labs are also heavily 
booked for teaching.  <b>Do not</b> wait until the last moment to submit
 as you may find you cannot get into any of the rooms to access your 
source code files.  Not being able to access the machine due to lack of 
planning is <b>not</b> an extenuating circumstance.</p>

    <p><b>Late submissions</b>: AE1PGA late submission policy is <b>different</b> from the standard university policy.  Late submissions will lose 5 percentage points <b>per hour</b>,
 rounded up to the next whole hour.  This is to better represent the 
large benefit a small amount of extra time can give at the end of a 
programming exercise.  No late submissions will be accepted more than 24
 hours after the exercise deadline.  If you have extenuating 
circumstances you should file them before the deadline.</p>

    <h2>Plagiarism</h2>
    <b>
    <p>You should complete this coursework on your own.  Anyone 
suspected of plagiarism will be investigated and punished in accordance 
with the university policy on plagiarism (see your student handbook and 
the University Quality Manual). This may include a mark of zero for this
 coursework.</p>

    <p>You should write the source code required for this assignment 
yourself. If you use code from other sources (books, web pages, etc), 
you should use comments to acknowledge this (and marks will be heavily 
      adjusted down accordingly).
      <i>The only exception to this is the prompt_str function developed
	during the lectures; you may use this, with or without modification,
	without penalty.
      </i>
    </p>

    <p>You must not copy or share source code with other students.  You 
must not work together on your solution.  You can informally talk about 
higher-level ideas but not to a level of detail that would allow you all
 to create the same source code.
    </p>

    <p>Remember, it is quite easy for experienced lecturers to spot 
plagiarism in source code.  If you are having problems you should ask 
questions rather then plagiarize.  If you are not able to complete the 
exercise then you should still submit your incomplete program as that 
will still get you some of the marks for the parts you have done (but 
make sure your incomplete solution compiles and partially runs!).
      </p>
    </b>
<h2>Marking</h2>

    <p>The marking scheme will be as follows:
      </p><ul>
	<li><i>Tests (60%):</i> Your program should correctly implement the 
task requirements.  A number of tests will be run against your program 
with different input data designed to test if this is the case for each 
individual requirement.  The tests themselves are secret but general 
examples of the tests might be:
	  <ul>
	    <li>Does the program work with the example I/O in the question?
	    </li><li>Does the program work with typical valid input?
	    </li><li>Does the program correctly deal with input around boundary values?
	    </li><li>Does the program correctly deal with invalid values?
	    </li><li>Does the program handle errors with resources not being available (eg, malloc failing or a filename being wrong)?
	    </li><li>Does the program output match the required format?
	  </li></ul>
	  As noted in the submission section, <b>if your program does not compile then you will lose all testing marks</b>.
	  
	</li><li><i>Appropriate use of language features (30%):</i>
	  Your program should use the appropriate C language features in your 
solution.   You can use any language features or techniques that you 
have seen in the course, or you have learned on your own, as long as 
they are appropriate to your solution.  Examples of this might be:
	  <ul>
	    <li>If you have many similar values, are you using arrays (or equivalent) instead of many individual variables?
	    </li><li>Have you broken your program down into separate functions?
	    </li><li>Are all your function arguments being used?
	    </li><li>If your functions return values, are they being used?
	    </li><li>If you have complex data, are you using structures?
	    </li><li>Are you using loops to avoid repeating many lines of code?
	    </li><li>Are your if/switch statements making a difference, or is the conditions always true or false making the statement pointless?
	  </li></ul>

	</li><li><i>Source code formatting (10%):</i>
	  Your program should be correctly formatted and easy to understand by a
 competent C programmer.  This includes, but is not limited to, 
indentation, bracketing, variable/function naming, and use of comments. 
 See the lecture notes, and the example programs 
for examples of correctly formatting programs.

      </li></ul>
Late Submissions: see submission section above.
      <p></p>

      <h2>Task</h2>

    <p>
      Your task is to write a program that will work out the shortest route to escape from a dungeon.  A representation of the dungeon will be stored in a file that your program will need to load.  That representation will also specify where the exit of the dungeon is.  Your program will also be given the starting position as a command-line argument.  It must then print out the steps to take the shortest route from the starting position to the exit of the dungeon, or a message if there is no route out.
    </p>
    <p>
      The program will be run in one of two different ways.  The first is with three command line arguments:
      <ul>
	<li>The first argument will be the path to the dungeon file.
	<li>The second argument will be the X coordinate to start at.
	<li>The third argument will be the Y coordinate to start at.
      </ul>
      The second way is with only two command line arguments:
      <ul>
	<li>The first argument will be the X coordinate to start at.
	<li>The second argument will be the Y coordinate to start at.
      </ul>
      In the latter case, you program should use the default filename of "dungeon.map" in the current directory for the dungeon file.  The coordinates should be a non-negative integers.  If the command line arguments do not match one of these ways, the program should display the error message "Invalid command line arguments. Usage: [filename] &lt;x&gt; &lt;y&gt;" and exit with exit code 1.
    </p>

    <p>
      The format of the dungeon file is as follows.  The first line contains two integers greater than 0 separated by one or more spaces.  These are, respectively, the width (W) and height (H) of the dungeon.  There are then H lines of text, each W characters long (plus the newline character).  Each character on these lines represents a location in the dungeon, starting from 0,0 on the first character of the first line, and W-1,H-1 on the last character of the last line.  All lines in the file are ended by a single newline character.
    </p>
    <p>
      Each location contains one of 3 possible characters:
      <ul>
	<li>A dot (<code>.</code>) which represents an empty space.
	<li>A hash (<code>#</code>) which represents a wall.
	<li>A lower-case letter <code>x</code> which represents the exit of the dungeon.
      </ul>
      If a location contains any other character, your program should print the message "Invalid dungeon file!" and exit with exit code 2.  If the dungeon does not contain a single exit location, your program should print the same error message and exit with the same exit code.  If the program encounters an error read in the file that is not related to its contents, it should print the message "Error reading dungeon file" together with an error message appropriately describing that actual error that occured according to the operating system.  It should then exit with exit code 3.
    </p>

    <p>
      The goal of the program is to find the shortest path from the start location to the exit location.  If the start location is not an empty space, the program should print "Invalid starting location!" and exit with exit code 4.  You can move from any empty space into another neighbouring empty space by moving up, down, left, or right.  You cannot move diagonally.  You cannot move into a space occupied by a wall.  If you can successfully reach the exit location, the final move from the previous empty space onto the exit location counts as a move.  If your starting location is the same as the exit location, you can exit in zero moves.
    </p>
    <p>
      The program must output the coordinates of each position from the starting location to the exit location.  Each location should be printed as "X,Y" where X is the x-coordinate and Y is the y-coordinate of the location, followed by a newline.  The first line of the output should be the starting location, then there should be all the intermediate locations in the shortest path to the exit, then the last line should be the exit location.  If the start location equals the exit location then just output a single line with the exit location.  Once the program has output all coordinates is should exit with exit code 0.
    </p>
    <p>
      For any given dungeon it may be impossible to go from the start location to the exit location.  In those cases the program should print the starting location as above then print "No escape possible." on the next line.
    </p>
    <p>
      If multiple paths with the same shortest length exist, the program should pick an arbitrary one to output.  By arbitrary, we mean it can pick any of them but it must pick the same one each time the program is run with the same file and starting location.
    </p>
    <p>
      If the program needs to exit because it cannot allocate memory, it should print the error message "Unable to allocate memory." and exit with exit code 5.
      If the program needs to exit for any other reason, print an appropriate error message and exit with exit code 6.
    </p>

    

<h2>Example input/output</h2>

Given the following dungeon file (example.map):
<pre>
8 6
########
##.#..##
#.....##
#.#.#.##
#...#x##
########
</pre>

Example:
<pre>
[zlizpd3@cs-linux cw3]$ ./dungeon example.map 2 1
2,1
2,2
3,2
4,2
5,2
5,3
5,4
[zlizpd3@cs-linux cw3]$ 
</pre>

<h2>Hints</h2>

<ul>
  <li>If you are given a file name, that file might not exist or you might not have permission to read it!
  <li>Remember to free any memory which you no longer need.  Your program should not have any memory leaks (dynamically allocated areas of memory which are no longer reachable).  You will need to consider this in many places in your program, not just the delete option.</li>
  <li>The internal structure of the dungeon could be anything that matches the description abouve, including loops, larger open areas, and dead-ends.
  <li>The format of the data in the file does not have to be the same format that you use in memory for your calculations.  Consider what you need to do to solve the problem and what kind of representation of data might help you perform such calculations.
</ul>

<b>END</b>

  

</body></html>
