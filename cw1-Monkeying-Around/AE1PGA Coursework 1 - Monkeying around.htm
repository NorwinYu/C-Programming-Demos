<!DOCTYPE html>
<!-- saved from url=(0092)http://moodle.nottingham.ac.uk/pluginfile.php/3127426/mod_resource/content/3/ae1pga-cw1.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    
    <title>AE1PGA Coursework 1 - Monkeying around</title>
    <meta name="description" content="AE1PGA Coursework 1">
    <meta name="author" content="Paul Dempster">
    <style>
      h2, h3 {
      text-decoration: underline;
      }
    </style>
  </head>
  
  <body>
    <h1>AE1PGA Coursework 1  - Monkeying around</h1>


    <h2>Introduction</h2>

    <p>This is the first AE1PGA Coursework.  It is worth <b>5% of the module mark</b>.  It requires you to write a program that will print some output depending on what input the user has entered.  The deadline for
 this exercise is <b>16:00 on Wednesday 28th September 2016</b>.
    </p>

    <p><strong>Read the entire document before beginning the exercise.</strong></p>

    <p>If you have any questions about this exercise, please ask in the Q&amp;A forum on Moodle, after a lecture, in a lab, or during the advertised office hours.
      Do not post your program or parts of your program to Moodle as you are not allowed to share your coursework programs with other students.
      
  If any questions requires this exercise to be clarified then this 
document will be updated and everyone will be notified via Moodle.
    </p>

    <h3>Version History</h3>
    <ul>
      <li><i>Version 1.0 - 2016-09-21 - Original version.</i>
    </li></ul>
<h2>Submission</h2>

    <p>You must submit a single C source code file containing all your code for this exercise.  This file must be called <code>monkey.c</code>
 and must not require any other files outside of the standard C headers 
which are always available.  The first line of the file should be a 
comment which contains your student ID number, username, and full name, 
of the form:<br>
      <code style="padding-left:5em;">// 6512345 zy12345 Joe Blogs</code>
    </p>

    <p>The file must compile without warnings or errors when I use the command<br>
      <code style="padding-left:5em;">gcc -std=c99 -lm -Wall -Wformat -Wwrite-strings monkey.c -o monkey</code><br>
      This command will be run on our Linux server <code>cs-linux</code>.
  If it does not compile, for any reason, then you will lose all the 
marks for testing (common reasons in the past have been submitting a 
file with the wrong filename, or developing your solution on your 
personal computer without having tested it on our Linux server).  If the
 file compiles but has warnings then you will lose some marks for not 
correcting the warnings.
    </p>

    <p>The completed source code file should be uploaded to the Coursework 1 Submission link on the AE1PGA Moodle page.  You may submit 
as many times as you wish before the deadline (the last submission 
before the deadline will be used).  After the deadline has passed, if 
you have already submitted your exercise then you will not be able to 
submit again.  If you have not already submitted then you will be 
allowed to submit <b>once</b>.
    </p>

    <p>Remember that you can only access the Linux server from the 
designated labs in SEB and SSB and that these labs are also heavily 
booked for teaching.  <b>Do not</b> wait until the last moment to submit
 as you may find you cannot get into any of the rooms to access your 
source code files.  Not being able to access the machine due to lack of 
planning is <b>not</b> an extenuating circumstance.</p>

    <p><b>Late submissions</b>: AE1PGA late submission policy is <b>different</b> from the standard university policy.  Late submissions will lose 5 percentage points <b>per hour</b>,
 rounded up to the next whole hour.  This is to better represent the 
large benefit a small amount of extra time can give at the end of a 
programming exercise.  No late submissions will be accepted more than 24
 hours after the exercise deadline.  If you have extenuating 
circumstances you should file them before the deadline.</p>

    <h2>Plagiarism</h2>
    <b>
    <p>You should complete this coursework on your own.  Anyone 
suspected of plagiarism will be investigated and punished in accordance 
with the university policy on plagiarism (see your student handbook and 
the University Quality Manual). This may include a mark of zero for this
 coursework.</p>

    <p>You should write the source code required for this assignment 
yourself. If you use code from other sources (books, web pages, etc), 
you should use comments to acknowledge this (and marks will be heavily 
adjusted down accordingly).</p>

    <p>You must not copy or share source code with other students.  You 
must not work together on your solution.  You can informally talk about 
higher-level ideas but not to a level of detail that would allow you all
 to create the same source code.
    </p>

    <p>Remember, it is quite easy for experienced lecturers to spot 
plagiarism in source code.  If you are having problems you should ask 
questions rather then plagiarize.  If you are not able to complete the 
exercise then you should still submit your incomplete program as that 
will still get you some of the marks for the parts you have done (but 
make sure your incomplete solution compiles and partially runs!).
      </p>
    </b>
<h2>Marking</h2>

    <p>The marking scheme will be as follows:
      </p><ul>
	<li><i>Tests (60%):</i> Your program should correctly implement the 
task requirements.  A number of tests will be run against your program 
with different input data designed to test if this is the case for each 
individual requirement.  The tests themselves are secret but general 
examples of the tests might be:
	  <ul>
	    <li>Does the program work with the example I/O in the question?
	    </li><li>Does the program work with typical valid input?
	    </li><li>Does the program correctly deal with input around boundary values?
	    </li><li>Does the program correctly deal with invalid values?
	    </li><li>Does the program handle errors with resources not being available (eg, malloc failing or a filename being wrong)?
	    </li><li>Does the program output match the required format?
	  </li></ul>
	  As noted in the submission section, <b>if your program does not compile then you will lose all testing marks</b>.
	  
	</li><li><i>Appropriate use of language features (30%):</i>
	  Your program should use the appropriate C language features in your 
solution.   You can use any language features or techniques that you 
have seen in the course, or you have learned on your own, as long as 
they are appropriate to your solution.  Examples of this might be:
	  <ul>
	    <li>If you have many similar values, are you using arrays (or equivalent) instead of many individual variables?
	    </li><li>Have you broken your program down into separate functions?
	    </li><li>Are all your function arguments being used?
	    </li><li>If your functions return values, are they being used?
	    </li><li>If you have complex data, are you using structures?
	    </li><li>Are you using loops to avoid repeating many lines of code?
	    </li><li>Are your if/switch statements making a difference, or is the conditions always true or false making the statement pointless?
	  </li></ul>

	</li><li><i>Source code formatting (10%):</i>
	  Your program should be correctly formatted and easy to understand by a
 competent C programmer.  This includes, but is not limited to, 
indentation, bracketing, variable/function naming, and use of comments. 
 See the lecture notes, and the example programs 
for examples of correctly formatting programs.

      </li></ul>
Late Submissions: see submission section above.
      <p></p>

      <h2>Task</h2>

    <p>You have to write a program that will output a message depending on what the user types in.  The user should be prompted to enter three positive integers.  For each number, the user should be prompted with the message "Enter number X: ", where X is either 1, 2, or 3 depending on which number is being entered.  The user should enter the number on the same line as the prompt.  If any of the integers are not positive, the program should print the error message "Invalid number!" and exit without prompting for the rest of the numbers.
    </p>
    <p>
      If the first number the user enters is odd, then the program should add together the second and third numbers.  If the first number is even, then the program should subtract the third number from the second.  If the result of the calculation is greater than 10, then program should print the message "Paul is the Monkey King, he can lift XXX jin!" where XXX is replaced by the result of the calcuation.  After this, the program should exit.
    </p>

    <p>You can assume the user will not enter a number bigger than the maximum value which can be contained in an <code>int</code> variable and that they will not input text, floating-point numbers, or anything else that is not an integer.  Thy may, however, end any valid <code>int</code> value.  Note that 0 is not a positive integer.
    </p>

    <p>When the program ends, the command prompt should not appear on the same line as your program output.  It should appear on the next line by itself.  There should not be any blank lines between your program output and the command prompt.  When the program exits, it can exit with any return code.
    </p>
    
<h2>Example input/output</h2>

Example 1:
<pre>[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 2
Enter number 2: -7
Invalid number!
[zlizpd3@cs-linux cw1]$ 
</pre>

Example 2:
<pre>[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 17
Enter number 2: 3
Enter number 3: 6
</pre>

Other examples of the program being run:
<pre>[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 16
Enter number 2: 3
Enter number 3: 6
[zlizpd3@cs-linux cw1]$  
[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 11
Enter number 2: 4
Enter number 3: 22
Paul is the Monkey King, he can lift 26 jin!
[zlizpd3@cs-linux cw1]$ 
[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 11
Enter number 2: 22
Enter number 3: 4
Paul is the Monkey King, he can lift 26 jin!
[zlizpd3@cs-linux cw1]$  
[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 246
Enter number 2: 22
Enter number 3: 4
Paul is the Monkey King, he can lift 18 jin!
[zlizpd3@cs-linux cw1]$  
[zlizpd3@cs-linux cw1]$ ./monkey 
Enter number 1: 246
Enter number 2: 4
Enter number 3: 22
[zlizpd3@cs-linux cw1]$  
</pre>

<h2>Hints</h2>

<ul>
  <li><p>You can find the remainder by using the modulus operator.</p></li>
  <li><p>Zero is neither a positive nor negative integer.</p></li>
  <li><p>Remember that the format specification for <code>printf/scanf</code> depends on the type of the variable you are storing the value in.</p></li>
    
</ul>

<b>END</b>

  


<audio controls="controls" style="display: none;"></audio><div id="cli_dialog_div"></div></body><style type="text/css">#yddContainer{display:block;font-family:Microsoft YaHei;position:relative;width:100%;height:100%;top:-4px;left:-4px;font-size:12px;border:1px solid}#yddTop{display:block;height:22px}#yddTopBorderlr{display:block;position:static;height:17px;padding:2px 28px;line-height:17px;font-size:12px;color:#5079bb;font-weight:bold;border-style:none solid;border-width:1px}#yddTopBorderlr .ydd-sp{position:absolute;top:2px;height:0;overflow:hidden}.ydd-icon{left:5px;width:17px;padding:0px 0px 0px 0px;padding-top:17px;background-position:-16px -44px}.ydd-close{right:5px;width:16px;padding-top:16px;background-position:left -44px}#yddKeyTitle{float:left;text-decoration:none}#yddMiddle{display:block;margin-bottom:10px}.ydd-tabs{display:block;margin:5px 0;padding:0 5px;height:18px;border-bottom:1px solid}.ydd-tab{display:block;float:left;height:18px;margin:0 5px -1px 0;padding:0 4px;line-height:18px;border:1px solid;border-bottom:none}.ydd-trans-container{display:block;line-height:160%}.ydd-trans-container a{text-decoration:none;}#yddBottom{position:absolute;bottom:0;left:0;width:100%;height:22px;line-height:22px;overflow:hidden;background-position:left -22px}.ydd-padding010{padding:0 10px}#yddWrapper{color:#252525;z-index:10001;background:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ab20.png);}#yddContainer{background:#fff;border-color:#4b7598}#yddTopBorderlr{border-color:#f0f8fc}#yddWrapper .ydd-sp{background-image:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ydd-sprite.png)}#yddWrapper a,#yddWrapper a:hover,#yddWrapper a:visited{color:#50799b}#yddWrapper .ydd-tabs{color:#959595}.ydd-tabs,.ydd-tab{background:#fff;border-color:#d5e7f3}#yddBottom{color:#363636}#yddWrapper{min-width:250px;max-width:400px;}</style></html>