<!DOCTYPE html>
<!-- saved from url=(0092)http://moodle.nottingham.ac.uk/pluginfile.php/3176044/mod_resource/content/9/ae1pga-cw2.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    
    <title>AE1PGA Coursework 2 - Lifting Arrays</title>
    <meta name="description" content="AE1PGA Coursework 2">
    <meta name="author" content="Matthew Pike and Paul Dempster">
    <style>
      h2, h3 {
      text-decoration: underline;
      }
    </style>
  </head>
  
  <body>
    <h1>AE1PGA Coursework 2  - Lifting Arrays</h1>


    <h2>Introduction</h2>

    <p>This is the second AE1PGA Coursework.  It is worth <b>10% of the module mark</b>.  It requires you to write a program that will print some output depending on what input the user has entered.  The deadline for
 this exercise is <b>16:00 on Wednesday 26th of October  2016</b>.
    </p>

    <p><strong>Read the entire document before beginning the exercise.</strong></p>

    <p>If you have any questions about this exercise, please ask in the Q&amp;A forum on Moodle, after a lecture, in a lab, or during the advertised office hours.
      Do not post your program or parts of your program to Moodle as you are not allowed to share your coursework programs with other students.
      
  If any questions requires this exercise to be clarified then this 
document will be updated and everyone will be notified via Moodle.
    </p>

    <h3>Version History</h3>
    <ul>
      <li>Version 1.0 - 2016-10-12 - Original version.
      </li><li><i>Version 1.1 - 2016-10-12 - Updated version.</i>
  <ul>
    <li>Changed wording around 10,000 weight limit to remove reference to units.  It is either pounds or kilograms depending on what unit the user selected earlier on.</li>
  </ul>
      </li><li><i>Version 1.2 - 2016-10-13 - Updated version.</i>
  <ul>
    <li>Explicitly stated the desired behaviour for when a user specifies an invalid weight unit. If a value other than 1 or 2 is entered, the program should display "Invalid Number!" and exit.</li>
  </ul>
    </li>
  <li><i>Version 1.3 - 2016-10-13 - Updated version.</i>
  <ul>
    <li>Clarified the validity of zero as an input weight - "If the specified weight is negative (&lt;0), the program should print the error message "Invalid number!" "</li>
  </ul>
    </li>

      <li><i>Version 1.4 - 2016-10-14 - Updated version.</i>
  <ul>
    <li> Update 1: Output for Example 2 contained an extra "1"</li>
    <li> Update 2: Number of "50" weights should be 3.
    </li><li>Corrected output has been updated.</li>
  </ul>
    </li>

    

      <li><i>Version 1.5 - 2016-10-14 - Current version.</i>
  <ul>
    <li>Program should exit with code 3 if the user provides an invalid weight unit value (i.e. not 1 or 2)</li>
  </ul>
    </li></ul>
<h2>Submission</h2>

    <p>You must submit a single C source code file containing all your code for this exercise.  This file must be called <code>lifting.c</code>
 and must not require any other files outside of the standard C headers 
which are always available.  The first line of the file should be a 
comment which contains your student ID number, username, and full name, 
of the form:<br>
      <code style="padding-left:5em;">// 6512345 zy12345 Joe Blogs</code>
    </p>

    <p>The file must compile without warnings or errors when I use the command<br>
      <code style="padding-left:5em;">gcc -std=c99 -lm -Wall -Wformat -Wwrite-strings lifting.c -o lifting</code><br>
      This command will be run on our Linux server <code>cs-linux</code>.
  If it does not compile, for any reason, then you will lose all the 
marks for testing (common reasons in the past have been submitting a 
file with the wrong filename, or developing your solution on your 
personal computer without having tested it on our Linux server).  If the
 file compiles but has warnings then you will lose some marks for not 
correcting the warnings.
    </p>

    <p>The completed source code file should be uploaded to the Coursework 2 Submission link on the AE1PGA Moodle page.  You may submit 
as many times as you wish before the deadline (the last submission 
before the deadline will be used).  After the deadline has passed, if 
you have already submitted your exercise then you will not be able to 
submit again.  If you have not already submitted then you will be 
allowed to submit <b>once</b>.
    </p>

    <p>Remember that you can only access the Linux server from the 
designated labs in SEB and SSB and that these labs are also heavily 
booked for teaching.  <b>Do not</b> wait until the last moment to submit
 as you may find you cannot get into any of the rooms to access your 
source code files.  Not being able to access the machine due to lack of 
planning is <b>not</b> an extenuating circumstance.</p>

    <p><b>Late submissions</b>: AE1PGA late submission policy is <b>different</b> from the standard university policy.  Late submissions will lose 5 percentage points <b>per hour</b>,
 rounded up to the next whole hour.  This is to better represent the 
large benefit a small amount of extra time can give at the end of a 
programming exercise.  No late submissions will be accepted more than 24
 hours after the exercise deadline.  If you have extenuating 
circumstances you should file them before the deadline.</p>

    <h2>Plagiarism</h2>
    <b>
    <p>You should complete this coursework on your own.  Anyone 
suspected of plagiarism will be investigated and punished in accordance 
with the university policy on plagiarism (see your student handbook and 
the University Quality Manual). This may include a mark of zero for this
 coursework.</p>

    <p>You should write the source code required for this assignment 
yourself. If you use code from other sources (books, web pages, etc), 
you should use comments to acknowledge this (and marks will be heavily 
adjusted down accordingly).</p>

    <p>You must not copy or share source code with other students.  You 
must not work together on your solution.  You can informally talk about 
higher-level ideas but not to a level of detail that would allow you all
 to create the same source code.
    </p>

    <p>Remember, it is quite easy for experienced lecturers to spot 
plagiarism in source code.  If you are having problems you should ask 
questions rather then plagiarize.  If you are not able to complete the 
exercise then you should still submit your incomplete program as that 
will still get you some of the marks for the parts you have done (but 
make sure your incomplete solution compiles and partially runs!).
      </p>
    </b>
<h2>Marking</h2>

    <p>The marking scheme will be as follows:
      </p><ul>
  <li><i>Tests (60%):</i> Your program should correctly implement the 
task requirements.  A number of tests will be run against your program 
with different input data designed to test if this is the case for each 
individual requirement.  The tests themselves are secret but general 
examples of the tests might be:
    <ul>
      <li>Does the program work with the example I/O in the question?
      </li><li>Does the program work with typical valid input?
      </li><li>Does the program correctly deal with input around boundary values?
      </li><li>Does the program correctly deal with invalid values?
      </li><li>Does the program handle errors with resources not being available (eg, malloc failing or a filename being wrong)?
      </li><li>Does the program output match the required format?
    </li></ul>
    As noted in the submission section, <b>if your program does not compile then you will lose all testing marks</b>.
    
  </li><li><i>Appropriate use of language features (30%):</i>
    Your program should use the appropriate C language features in your 
solution.   You can use any language features or techniques that you 
have seen in the course, or you have learned on your own, as long as 
they are appropriate to your solution.  Examples of this might be:
    <ul>
      <li>If you have many similar values, are you using arrays (or equivalent) instead of many individual variables?
      </li><li>Have you broken your program down into separate functions?
      </li><li>Are all your function arguments being used?
      </li><li>If your functions return values, are they being used?
      </li><li>If you have complex data, are you using structures?
      </li><li>Are you using loops to avoid repeating many lines of code?
      </li><li>Are your if/switch statements making a difference, or is the conditions always true or false making the statement pointless?
    </li></ul>

  </li><li><i>Source code formatting (10%):</i>
    Your program should be correctly formatted and easy to understand by a
 competent C programmer.  This includes, but is not limited to, 
indentation, bracketing, variable/function naming, and use of comments. 
 See the lecture notes, and the example programs 
for examples of correctly formatting programs.

      </li></ul>
Late Submissions: see submission section above.
      <p></p>

      <h2>Task</h2>

      <p>
      Imagine you are the programmer at a large, international fitness company. The company specialises in providing weightlifting facilities (gyms) across the world. Your boss has asked you to develop a program that will help customers calculate the number of disks (weights) they are required to collect in order to lift their target weight. Each gym has a collection of weights (50, 20, 10, 5, 2, 1, 0.5, 0.25) in both Kilograms (kg) and Pounds (lbs). For example, a customer might want to know which disks to collect in order to lift 225.5kg of weight (target weight = 225.5kg). For this example, the customer will need 4 x 50kg disks, 1x20kg disk, 1x5kg disk and 1x0.5kg disk. The program will output this to the customer to aid them in their weightlifting session.
      </p>

      <p>
  You have to write a program that will output the quantity of each disk required for the specified target weight. The user should be prompted to first, <code>"Enter the Unit of Weight ([1] - lbs, [2] - kg): "</code>, where an input of <code>1</code> specifies the weight unit to be Pounds and an input of <code>2</code> specifies sets the weight unit to be kilograms.  You can assume the user enters an <code>int</code> value. If the user enters a value that is not <code>1</code> or <code>2</code>, then the message "Invalid Number!" should be displayed and the program should exit.  The second input should prompt the user to <code>"Enter the Target Weight in X: "</code>, where X is the unit of weight specified in the first input (lbs or kg). This second input value is the target weight. The user should enter the inputs on the same line as the prompt. If the specified weight is negative (&lt;0), the program should print the error message "Invalid number!".  If the specified weight is greater than 10,000, the program should print the error message "Too heavy!".  You can assume that the user will only enter weight values which can be represented by a <code>double</code>.
      </p>

      <p>
      Your collection of disks are:
      </p><center>
        <code>50, 20, 10, 5, 2, 1, 0.5, 0.25</code>
      </center>
      <p></p>
      <p>
      The collection of weights is the same for Pounds (lbs) and Kilograms (kg). That means, 50 in the above list is <b>50lbs when the user specifies pounds</b>, and <b>50kg when the user specifies Kilograms</b>. 
      Your program must calculate the smallest number of disks required to exactly match the desired weight.
      The program should print a line with the quantity of each disk required, in the order given above, separated by a comma.  This should be on a line of it's own, there should be no spaces between the numbers, and there should be no extra commas at the end of the line.
      If it is not possible to represent the specified weight using the available collection of disks, your program should output: "Impossible!". 
      </p>


    <p>You can assume the user will not enter text, or any other values which are not the types specified above.  Note that 0 is a valid input for the target weight.
    </p>

    <p>When the program ends, the command prompt should not appear on the same line as your program output.  It should appear on the next line by itself.  There should not be any blank lines between your program output and the command prompt.  When the program exits, it should exit with exit code 1 if it was due to a non-positive weight, exit code 2 if it was due to a weight over 10,000, exit code 3 if the user did not input 1 or 2 for the weight's unit and exit code 0 otherwise.
    </p>

<h2>Example input/output</h2>

Example 1:
<pre>[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 2
Enter the Target Weight in kg: 55.5
1,0,0,1,0,0,1,0
[zlizpd3@cs-linux cw2]$ 
</pre>

Example 2:
<pre>[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 1
Enter the Target Weight in lbs: 189.75
3,1,1,1,2,0,1,1
</pre>

Other examples of the program being run:
<pre>[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 1
Enter the Target Weight in lbs: 0
0,0,0,0,0,0,0,0
[zlizpd3@cs-linux cw2]$  
[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 2
Enter the Target Weight in kg: 1.0005
Impossible!
[zlizpd3@cs-linux cw2]$  
[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 2
Enter the Target Weight in kg: 1.5
0,0,0,0,0,1,1,0
[zlizpd3@cs-linux cw2]$  
[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): 2
Enter the Target Weight in kg: 51.75
1,0,0,0,0,1,1,1
[zlizpd3@cs-linux cw2]$  
[zlizpd3@cs-linux cw2]$ ./lifting 
Enter the Unit of Weights ([1] - lbs, [2] - kg): -2
Invalid Number!
[zlizpd3@cs-linux cw2]$  
</pre>

<h2>Hints</h2>

<ul>
  <li><p>You can use arrays to store many values of the same type.</p></li>
  <li><p>Remember that the format specification for <code>printf/scanf</code> depends on the type of the variable you are storing the value in.</p></li>
  <li><p>You can specify a program exit code as the argument to the <code>exit</code> function.</p></li>
    
</ul>

<b>END</b>

  


<audio controls="controls" style="display: none;"></audio><div id="cli_dialog_div"></div></body><style type="text/css">#yddContainer{display:block;font-family:Microsoft YaHei;position:relative;width:100%;height:100%;top:-4px;left:-4px;font-size:12px;border:1px solid}#yddTop{display:block;height:22px}#yddTopBorderlr{display:block;position:static;height:17px;padding:2px 28px;line-height:17px;font-size:12px;color:#5079bb;font-weight:bold;border-style:none solid;border-width:1px}#yddTopBorderlr .ydd-sp{position:absolute;top:2px;height:0;overflow:hidden}.ydd-icon{left:5px;width:17px;padding:0px 0px 0px 0px;padding-top:17px;background-position:-16px -44px}.ydd-close{right:5px;width:16px;padding-top:16px;background-position:left -44px}#yddKeyTitle{float:left;text-decoration:none}#yddMiddle{display:block;margin-bottom:10px}.ydd-tabs{display:block;margin:5px 0;padding:0 5px;height:18px;border-bottom:1px solid}.ydd-tab{display:block;float:left;height:18px;margin:0 5px -1px 0;padding:0 4px;line-height:18px;border:1px solid;border-bottom:none}.ydd-trans-container{display:block;line-height:160%}.ydd-trans-container a{text-decoration:none;}#yddBottom{position:absolute;bottom:0;left:0;width:100%;height:22px;line-height:22px;overflow:hidden;background-position:left -22px}.ydd-padding010{padding:0 10px}#yddWrapper{color:#252525;z-index:10001;background:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ab20.png);}#yddContainer{background:#fff;border-color:#4b7598}#yddTopBorderlr{border-color:#f0f8fc}#yddWrapper .ydd-sp{background-image:url(chrome-extension://eopjamdnofihpioajgfdikhhbobonhbb/ydd-sprite.png)}#yddWrapper a,#yddWrapper a:hover,#yddWrapper a:visited{color:#50799b}#yddWrapper .ydd-tabs{color:#959595}.ydd-tabs,.ydd-tab{background:#fff;border-color:#d5e7f3}#yddBottom{color:#363636}#yddWrapper{min-width:250px;max-width:400px;}</style></html>